<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Hugo on 0x4b404ec</title>
    <link>https://0x4b404ec.github.io/tags/hugo/</link>
    <description>Recent content in Hugo on 0x4b404ec</description>
    <image>
      <title>0x4b404ec</title>
      <url>https://0x4b404ec.github.io/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</url>
      <link>https://0x4b404ec.github.io/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</link>
    </image>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Sun, 31 Dec 2023 20:31:46 +0800</lastBuildDate>
    <atom:link href="https://0x4b404ec.github.io/tags/hugo/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>[转] Hugo&#43;GithubAction搭建Pages</title>
      <link>https://0x4b404ec.github.io/posts/hugo&#43;githubaction%E6%90%AD%E5%BB%BApages-%E8%BD%AC/</link>
      <pubDate>Sun, 31 Dec 2023 20:31:46 +0800</pubDate>
      <guid>https://0x4b404ec.github.io/posts/hugo&#43;githubaction%E6%90%AD%E5%BB%BApages-%E8%BD%AC/</guid>
      <description>利用Hugo+Github Pages搭建个人博客 转载于：https://www.cnblogs.com/liumylay/articles/17936667.html
转载于：https://www.cnblogs.com/liumylay/articles/17936667.html
转载于：https://www.cnblogs.com/liumylay/articles/17936667.html
前言 创建 GitHub 帐户
安装git，下载对应系统版本 exe ，无脑点击下一步。
安装hugo(extended edition, v0.112.0 or later)
打开 Github 中的 Hugo 库，打开右边侧边栏About下面的 Realeases，下载最新的版本，本次下载为：hugo_extended_0.121.1_windows-amd64.zip
解压后，将其中的 hugo.exe 放到指定的安装目录，比如 D:\softwares\Hugo\bin，然后将该目录添加到系统环境变量（win+R → sysdm.cpl → 高级 → 环境变量 → 系统变量 Path）的 Path 下。
打开命令行，输入 hugo version，显示版本号即为安装成功
在几分钟内利用hugo快速发布自己的个人博客 快速开始 使用Git Bash依次输入以下命令，即可建立预览一个PaperMod主题的hugo网站：
1 2 3 4 5 6 hugo new site myblog cd myblog git init git submodule add --depth=1 https://github.com/adityatelange/hugo-PaperMod.git themes/PaperMod echo &amp;#34;theme = &amp;#39;PaperMod&amp;#39;&amp;#34; &amp;gt;&amp;gt; hugo.</description>
      <content:encoded><![CDATA[<h1 id="利用hugogithub-pages搭建个人博客">利用Hugo+Github Pages搭建个人博客</h1>
<blockquote>
<p>转载于：https://www.cnblogs.com/liumylay/articles/17936667.html</p>
<p>转载于：https://www.cnblogs.com/liumylay/articles/17936667.html</p>
<p>转载于：https://www.cnblogs.com/liumylay/articles/17936667.html</p>
</blockquote>
<h2 id="前言">前言</h2>
<ol>
<li>
<p><a href="https://github.com/signup">创建 GitHub 帐户</a></p>
</li>
<li>
<p><a href="https://git-scm.com/book/en/v2/Getting-Started-Installing-Git">安装git</a>，下载对应系统版本 exe ，无脑点击下一步。</p>
</li>
<li>
<p><a href="https://gohugo.io/installation/">安装hugo(extended edition, v0.112.0 or later)</a></p>
<ul>
<li>
<p>打开 Github 中的 <a href="https://github.com/gohugoio/hugo">Hugo</a> 库，打开右边侧边栏About下面的 Realeases，下载最新的版本，本次下载为：<a href="https://github.com/gohugoio/hugo/releases/download/v0.121.1/hugo_extended_0.121.1_windows-amd64.zip">hugo_extended_0.121.1_windows-amd64.zip</a></p>
<p><img loading="lazy" src="./index.assets/3275074-20231230193711801-1034771933-20231231205242597.png" alt="img"  />
</p>
</li>
<li>
<p>解压后，将其中的 hugo.exe 放到指定的安装目录，比如 D:\softwares\Hugo\bin，然后将该目录添加到系统环境变量（win+R → sysdm.cpl → 高级 → 环境变量 → 系统变量 Path）的 Path 下。</p>
</li>
<li>
<p>打开命令行，输入 <code>hugo version</code>，显示版本号即为安装成功</p>
</li>
</ul>
</li>
</ol>
<h2 id="在几分钟内利用hugo快速发布自己的个人博客">在几分钟内利用hugo快速发布自己的个人博客</h2>
<h3 id="快速开始">快速开始</h3>
<p>使用Git Bash<strong>依次</strong>输入以下命令，即可建立预览一个<a href="https://adityatelange.github.io/hugo-PaperMod/">PaperMod主题</a>的hugo网站：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">hugo new site myblog
</span></span><span class="line"><span class="cl"><span class="nb">cd</span> myblog
</span></span><span class="line"><span class="cl">git init
</span></span><span class="line"><span class="cl">git submodule add --depth<span class="o">=</span><span class="m">1</span> https://github.com/adityatelange/hugo-PaperMod.git themes/PaperMod
</span></span><span class="line"><span class="cl"><span class="nb">echo</span> <span class="s2">&#34;theme = &#39;PaperMod&#39;&#34;</span> &gt;&gt; hugo.toml
</span></span><span class="line"><span class="cl">hugo server
</span></span></code></pre></td></tr></table>
</div>
</div><p>通过终端中显示的 URL 查看您的站点。按此按钮<code>Ctrl + C</code>可停止 Hugo 的开发服务器。</p>
<h3 id="命令解释">命令解释</h3>
<p>在目录中为您的博客创建一个以<code>myblog</code>命名的文件夹<a href="https://gohugo.io/getting-started/directory-structure/">目录结构</a></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">hugo new site myblog
</span></span></code></pre></td></tr></table>
</div>
</div><p>将当前目录更改为博客的根目录。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="nb">cd</span> myblog
</span></span></code></pre></td></tr></table>
</div>
</div><p>在当前目录中初始化一个空的 Git 存储库。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">git init
</span></span></code></pre></td></tr></table>
</div>
</div><p>将<a href="https://adityatelange.github.io/hugo-PaperMod/">PaperMod主题</a>克隆到博客目录结构中，并将其作为<a href="https://git-scm.com/book/en/v2/Git-Tools-Submodules">Git 子模块</a><code>themes</code>添加到您的博客中。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">git submodule add --depth<span class="o">=</span><span class="m">1</span> https://github.com/adityatelange/hugo-PaperMod.git themes/PaperMod
</span></span></code></pre></td></tr></table>
</div>
</div><p>在博客配置文件<code>hugo.toml</code>(位于根目录)中添加一行，表明为<code>PaperMod</code>主题。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="nb">echo</span> <span class="s2">&#34;theme = &#39;PaperMod&#39;&#34;</span> &gt;&gt; hugo.toml
</span></span></code></pre></td></tr></table>
</div>
</div><p>启动Hugo的开发服务器来预览博客。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">hugo server
</span></span></code></pre></td></tr></table>
</div>
</div><p>按此按钮<code>Ctrl + C</code>可停止预览博客。</p>
<h3 id="添加内容">添加内容</h3>
<p>向您的网站添加新页面。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">hugo new posts/文章标题/index.md
</span></span><span class="line"><span class="cl"><span class="c1"># posts为你文章存储的文件夹名，可任取</span>
</span></span><span class="line"><span class="cl"><span class="c1"># 默认生成路径为content/posts/文章</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>为什么使用这个路径来存放文章，见这篇文章链接：https://www.cnblogs.com/liumylay/articles/17936688.html</p>
<p>使用任意文本编辑器打开文件<code>my-first-post.md</code>，可以看到默认内容为：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">---
</span></span><span class="line"><span class="cl">title: <span class="s2">&#34;My First Post&#34;</span>
</span></span><span class="line"><span class="cl">date: 2022-11-20T09:03:20-08:00
</span></span><span class="line"><span class="cl">draft: <span class="nb">true</span>
</span></span><span class="line"><span class="cl">---
</span></span></code></pre></td></tr></table>
</div>
</div><p>请注意<code>draft</code>中的值为true，代表草稿状态。默认情况下，Hugo 在您构建网站时不会发布草稿内容。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span><span class="lnt">9
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">---
</span></span><span class="line"><span class="cl">title: <span class="s2">&#34;My First Post&#34;</span>
</span></span><span class="line"><span class="cl">date: 2022-11-20T09:03:20-08:00
</span></span><span class="line"><span class="cl">draft: <span class="nb">true</span>
</span></span><span class="line"><span class="cl">---
</span></span><span class="line"><span class="cl"><span class="c1">## Introduction</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">This is **bold** text, and this is *emphasized* text.
</span></span><span class="line"><span class="cl">Visit the <span class="o">[</span>Hugo<span class="o">](</span>https://gohugo.io<span class="o">)</span> website!
</span></span></code></pre></td></tr></table>
</div>
</div><p>保存文件，然后启动Hugo的开发服务器来预览博客。您可以运行以下任一命令来预览草稿内容。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">hugo server --buildDrafts
</span></span><span class="line"><span class="cl">hugo server -D
</span></span></code></pre></td></tr></table>
</div>
</div><p>通过终端中显示的 URL 查看您的博客。当您继续添加和更改内容时，请保持开发服务器运行。</p>
<p>由于 Hugo 默认开启了热加载功能，所以我们不需要中断已启动的 Hugo 服务，可以在另外一个终端窗口的当前目录下执行其他操作或者修改文章，这些修改后的文章会自动在网页上实时渲染，这样你就可以同步实时观察修改后的网页效果。</p>
<h3 id="配置网站">配置网站</h3>
<p>使用编辑器打开项目根目录中的<a href="https://gohugo.io/getting-started/configuration/">博客配置</a>文件 ( <code>hugo.toml</code>)。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="nv">baseURL</span> <span class="o">=</span> <span class="s1">&#39;https://example.org/&#39;</span>
</span></span><span class="line"><span class="cl"><span class="nv">languageCode</span> <span class="o">=</span> <span class="s1">&#39;en-us&#39;</span>
</span></span><span class="line"><span class="cl"><span class="nv">title</span> <span class="o">=</span> <span class="s1">&#39;My New Hugo Site&#39;</span>
</span></span><span class="line"><span class="cl"><span class="nv">theme</span> <span class="o">=</span> <span class="s1">&#39;PaperMod&#39;</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>进行以下更改：</p>
<ol>
<li>为您的网站设置<code>baseURL</code>。该值必须以协议开头并以斜杠结尾，如上所示。</li>
<li>设置<code>languageCode</code>为您的语言和区域（中文简体为<code>zh-CN</code>）。</li>
<li>为您的网站设置标题<code>title</code>。</li>
</ol>
<p>启动 Hugo 的开发服务器以查看您的更改，请记住包含草稿内容。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">hugo server -D
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="发布网站">发布网站</h3>
<p>在此步骤中，您将<strong>发布</strong>您的网站，但不会<strong>部署</strong>它。</p>
<p>当您<strong>发布</strong><code>public</code>站点时，Hugo 在项目根目录的目录中创建整个静态站点。这包括 HTML 文件以及图像、CSS 文件和 JavaScript 文件等资产。</p>
<p>当您发布网站时，您通常不希望包含<a href="https://gohugo.io/getting-started/usage/#draft-future-and-expired-content">草稿、未来或过期的内容</a>。命令很简单：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">hugo
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="在互联网上利用github-pages部署个人博客">在互联网上利用Github Pages部署个人博客</h2>
<p>GitHub 通过 GitHub Pages 服务直接从 GitHub 存储库通过 SSL 为个人、组织或项目页面提供免费、快速的静态托管，并自动化开发工作流程并使用 GitHub Actions 进行构建。</p>
<h3 id="step1创建github存储库">Step1.创建Github存储库。</h3>
<p>注意库名必须以用户名开头，例如：我的用户名是liumy-lay，则库名为liumy-lay.github.io</p>
<h3 id="step2将本地存储库推送到-github">Step2.将本地存储库推送到 GitHub</h3>
<ul>
<li>报错：由于生成本地<code>git</code>库的分支默认是<code>master</code>，而<code>github</code>库默认分支为<code>main</code>，因此<code>git pus</code>h时会出现各种报错</li>
<li>解决：将本地分支改名为<code>main</code>，重新<code>git push</code>会报<code>fatal</code>，根据<code>fatal</code>提示内容强制推送即可解决。</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">  $ git remote add origin git@github.com:liumy-lay/liumy-lay.github.io.git <span class="c1"># 将本地git库与远程Github库建立联系</span>
</span></span><span class="line"><span class="cl">  $ git add .
</span></span><span class="line"><span class="cl">  $ git commit -m <span class="s1">&#39;first commit&#39;</span> 
</span></span><span class="line"><span class="cl">  $ git push origin main
</span></span><span class="line"><span class="cl">  error: src refspec main does not match any
</span></span><span class="line"><span class="cl">  error: failed to push some refs to <span class="s1">&#39;github.com:liumy-lay/liumy-lay.github.io.git&#39;</span>
</span></span><span class="line"><span class="cl">  $ git branch -M main <span class="c1"># 将当前分支改名为main</span>
</span></span><span class="line"><span class="cl">  $ git branch -a <span class="c1"># 可以查看当前所有分支，此命令非必要</span>
</span></span><span class="line"><span class="cl">  $ git push origin
</span></span><span class="line"><span class="cl">  fatal: The current branch main has no upstream branch.
</span></span><span class="line"><span class="cl">  To push the current branch and <span class="nb">set</span> the remote as upstream, use git push --set-upstream origin main
</span></span><span class="line"><span class="cl">  $ git push --set-upstream origin main --force <span class="c1">#强制推送合并分支</span>
</span></span><span class="line"><span class="cl">  Enumerating objects: 32, <span class="k">done</span>.
</span></span><span class="line"><span class="cl">  Counting objects: 100% <span class="o">(</span>32/32<span class="o">)</span>, <span class="k">done</span>.
</span></span><span class="line"><span class="cl">  Delta compression using up to <span class="m">16</span> threads
</span></span><span class="line"><span class="cl">  Compressing objects: 100% <span class="o">(</span>24/24<span class="o">)</span>, <span class="k">done</span>.
</span></span><span class="line"><span class="cl">  Writing objects: 100% <span class="o">(</span>32/32<span class="o">)</span>, 49.14 KiB <span class="p">|</span> 137.00 KiB/s, <span class="k">done</span>.
</span></span><span class="line"><span class="cl">  Total <span class="m">32</span> <span class="o">(</span>delta 5<span class="o">)</span>, reused <span class="m">0</span> <span class="o">(</span>delta 0<span class="o">)</span>, pack-reused <span class="m">0</span>
</span></span><span class="line"><span class="cl">  remote: Resolving deltas: 100% <span class="o">(</span>5/5<span class="o">)</span>, <span class="k">done</span>.
</span></span><span class="line"><span class="cl">  To github.com:liumy-lay/liumy-lay.github.io.git
</span></span><span class="line"><span class="cl">   + b899144...23b296b main -&gt; main <span class="o">(</span>forced update<span class="o">)</span>
</span></span><span class="line"><span class="cl">  branch <span class="s1">&#39;main&#39;</span> <span class="nb">set</span> up to track <span class="s1">&#39;origin/main&#39;</span>.
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="step3访问您的-github-存储库从主菜单中选择设置--页面">Step3.访问您的 GitHub 存储库，从主菜单中选择设置 &gt; 页面。</h3>
<p>在屏幕中央，将源更改为<code>GitHub Actions</code>。改变是立竿见影的；您不必按“保存”按钮。
<img loading="lazy" src="./index.assets/3275074-20231230193816275-664947653-20231231205204800.png" alt="img"  />
</p>
<h3 id="step4在本地存储库中根目录下创建一个空文件-githubworkflowshugoyaml">Step4.在本地存储库中根目录下创建一个空文件 <code>.github/workflows/hugo.yaml</code></h3>
<h3 id="step5将下面的-yaml-复制并粘贴到您创建的文件中根据需要更改分支名称和-hugo-版本">Step5.将下面的 YAML 复制并粘贴到您创建的文件中。根据需要更改分支名称和 Hugo 版本。</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span><span class="lnt">50
</span><span class="lnt">51
</span><span class="lnt">52
</span><span class="lnt">53
</span><span class="lnt">54
</span><span class="lnt">55
</span><span class="lnt">56
</span><span class="lnt">57
</span><span class="lnt">58
</span><span class="lnt">59
</span><span class="lnt">60
</span><span class="lnt">61
</span><span class="lnt">62
</span><span class="lnt">63
</span><span class="lnt">64
</span><span class="lnt">65
</span><span class="lnt">66
</span><span class="lnt">67
</span><span class="lnt">68
</span><span class="lnt">69
</span><span class="lnt">70
</span><span class="lnt">71
</span><span class="lnt">72
</span><span class="lnt">73
</span><span class="lnt">74
</span><span class="lnt">75
</span><span class="lnt">76
</span><span class="lnt">77
</span><span class="lnt">78
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="c"># Sample workflow for building and deploying a Hugo site to GitHub Pages</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">Deploy Hugo site to Pages</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">on</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="c"># Runs on pushes targeting the default branch</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">push</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">branches</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="l">main</span><span class="w"> </span><span class="c"># 分支名称默认为main</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="c"># Allows you to run this workflow manually from the Actions tab</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">workflow_dispatch</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c"># Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">permissions</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">contents</span><span class="p">:</span><span class="w"> </span><span class="l">read</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">pages</span><span class="p">:</span><span class="w"> </span><span class="l">write</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">id-token</span><span class="p">:</span><span class="w"> </span><span class="l">write</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c"># Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c"># However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">concurrency</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">group</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;pages&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">cancel-in-progress</span><span class="p">:</span><span class="w"> </span><span class="kc">false</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c"># Default to bash</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">defaults</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">run</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">shell</span><span class="p">:</span><span class="w"> </span><span class="l">bash</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">jobs</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="c"># Build job</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">build</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">runs-on</span><span class="p">:</span><span class="w"> </span><span class="l">ubuntu-latest</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">env</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">HUGO_VERSION</span><span class="p">:</span><span class="w"> </span><span class="m">0.121.0</span><span class="w"> </span><span class="c"># Hugo版本号</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">steps</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">Install Hugo CLI</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">run</span><span class="p">:</span><span class="w"> </span><span class="p">|</span><span class="sd">
</span></span></span><span class="line"><span class="cl"><span class="sd">          wget -O ${{ runner.temp }}/hugo.deb https://github.com/gohugoio/hugo/releases/download/v${HUGO_VERSION}/hugo_extended_${HUGO_VERSION}_linux-amd64.deb \
</span></span></span><span class="line"><span class="cl"><span class="sd">          &amp;&amp; sudo dpkg -i ${{ runner.temp }}/hugo.deb          </span><span class="w">          
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">Install Dart Sass</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">run</span><span class="p">:</span><span class="w"> </span><span class="l">sudo snap install dart-sass</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">Checkout</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">uses</span><span class="p">:</span><span class="w"> </span><span class="l">actions/checkout@v4</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">with</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">submodules</span><span class="p">:</span><span class="w"> </span><span class="l">recursive</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">fetch-depth</span><span class="p">:</span><span class="w"> </span><span class="m">0</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">Setup Pages</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">id</span><span class="p">:</span><span class="w"> </span><span class="l">pages</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">uses</span><span class="p">:</span><span class="w"> </span><span class="l">actions/configure-pages@v4</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">Install Node.js dependencies</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">run</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;[[ -f package-lock.json || -f npm-shrinkwrap.json ]] &amp;&amp; npm ci || true&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">Build with Hugo</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">env</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="c"># For maximum backward compatibility with Hugo modules</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">HUGO_ENVIRONMENT</span><span class="p">:</span><span class="w"> </span><span class="l">production</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">HUGO_ENV</span><span class="p">:</span><span class="w"> </span><span class="l">production</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">run</span><span class="p">:</span><span class="w"> </span><span class="p">|</span><span class="sd">
</span></span></span><span class="line"><span class="cl"><span class="sd">          hugo \
</span></span></span><span class="line"><span class="cl"><span class="sd">            --gc \
</span></span></span><span class="line"><span class="cl"><span class="sd">            --minify \
</span></span></span><span class="line"><span class="cl"><span class="sd">            --baseURL &#34;${{ steps.pages.outputs.base_url }}/&#34;          </span><span class="w">          
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">Upload artifact</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">uses</span><span class="p">:</span><span class="w"> </span><span class="l">actions/upload-pages-artifact@v2</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">with</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">path</span><span class="p">:</span><span class="w"> </span><span class="l">./public</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="c"># Deployment job</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">deploy</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">environment</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">github-pages</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">url</span><span class="p">:</span><span class="w"> </span><span class="l">${{ steps.deployment.outputs.page_url }}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">runs-on</span><span class="p">:</span><span class="w"> </span><span class="l">ubuntu-latest</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">needs</span><span class="p">:</span><span class="w"> </span><span class="l">build</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">steps</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">Deploy to GitHub Pages</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">id</span><span class="p">:</span><span class="w"> </span><span class="l">deployment</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">uses</span><span class="p">:</span><span class="w"> </span><span class="l">actions/deploy-pages@v3</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><h3 id="step6使用add-workflows之类的提交消息将更改提交到本地存储库然后推送到-github">Step6.使用“Add workflows”之类的提交消息将更改提交到本地存储库，然后推送到 GitHub。</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ git add .
</span></span><span class="line"><span class="cl">$ git commit -m <span class="s1">&#39;Add workflows&#39;</span> 
</span></span><span class="line"><span class="cl">$ git push origin 
</span></span><span class="line"><span class="cl">Enumerating objects: 6, <span class="k">done</span>.
</span></span><span class="line"><span class="cl">Counting objects: 100% <span class="o">(</span>6/6<span class="o">)</span>, <span class="k">done</span>.
</span></span><span class="line"><span class="cl">Delta compression using up to <span class="m">16</span> threads
</span></span><span class="line"><span class="cl">Compressing objects: 100% <span class="o">(</span>3/3<span class="o">)</span>, <span class="k">done</span>.
</span></span><span class="line"><span class="cl">Writing objects: 100% <span class="o">(</span>5/5<span class="o">)</span>, 1.32 KiB <span class="p">|</span> 1.32 MiB/s, <span class="k">done</span>.
</span></span><span class="line"><span class="cl">Total <span class="m">5</span> <span class="o">(</span>delta 1<span class="o">)</span>, reused <span class="m">0</span> <span class="o">(</span>delta 0<span class="o">)</span>, pack-reused <span class="m">0</span>
</span></span><span class="line"><span class="cl">remote: Resolving deltas: 100% <span class="o">(</span>1/1<span class="o">)</span>, completed with <span class="m">1</span> <span class="nb">local</span> object.
</span></span><span class="line"><span class="cl">To github.com:liumy-lay/liumy-lay.github.io.git
</span></span><span class="line"><span class="cl">   23b296b..aec5cc1  main -&gt; main
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="step7从-github-的主菜单中选择actions">Step7.从 GitHub 的主菜单中，选择Actions。</h3>
<p>当 GitHub 完成站点的构建和部署后，状态指示器的颜色将变为绿色。在部署步骤下，您将看到指向您的实时站点的链接。</p>
<p>将来，每当您从本地存储库推送更改时，GitHub 都会重建您的站点并部署更改。</p>
<p><img loading="lazy" src="./index.assets/3275074-20231230193802395-854741209-20231231205308987.png" alt="img"  />
</p>
<h2 id="总结">总结</h2>
<p>日常发布文章命令</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ hugo new <span class="o">[</span>posts<span class="o">]</span>/<span class="o">[</span>name<span class="o">]</span>/index.md
</span></span><span class="line"><span class="cl">$ hugo server -D
</span></span><span class="line"><span class="cl">$ hugo
</span></span><span class="line"><span class="cl">$ git status
</span></span><span class="line"><span class="cl">$ git add .
</span></span><span class="line"><span class="cl">$ git commit -m <span class="s1">&#39;[描述信息]&#39;</span>
</span></span><span class="line"><span class="cl">$ git push origin
</span></span></code></pre></td></tr></table>
</div>
</div><p>参考资料：</p>
<p><a href="https://gohugo.io/getting-started/quick-start/">https://gohugo.io/getting-started/quick-start/</a></p>
<p><a href="https://gohugo.io/hosting-and-deployment/hosting-on-github/">https://gohugo.io/hosting-and-deployment/hosting-on-github/</a></p>
]]></content:encoded>
    </item>
  </channel>
</rss>
