<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on 0x4b404ec&#39;s Blog</title>
    <link>https://0x4b404ec.github.io/posts/</link>
    <description>Recent content in Posts on 0x4b404ec&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Sun, 31 Dec 2023 20:31:46 +0800</lastBuildDate>
    <atom:link href="https://0x4b404ec.github.io/posts/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>[转] Hugo&#43;GithubAction搭建Pages</title>
      <link>https://0x4b404ec.github.io/posts/hugo&#43;githubaction%E6%90%AD%E5%BB%BApages-%E8%BD%AC/</link>
      <pubDate>Sun, 31 Dec 2023 20:31:46 +0800</pubDate>
      <guid>https://0x4b404ec.github.io/posts/hugo&#43;githubaction%E6%90%AD%E5%BB%BApages-%E8%BD%AC/</guid>
      <description>利用Hugo+Github Pages搭建个人博客 转载于：https://www.cnblogs.com/liumylay/articles/17936667.html
转载于：https://www.cnblogs.com/liumylay/articles/17936667.html
转载于：https://www.cnblogs.com/liumylay/articles/17936667.html
前言 创建 GitHub 帐户 安装git，下载对应系统版本 exe ，无脑点击下一步。 安装hugo(extended edition, v0.112.0 or later) 打开 Github 中的 Hugo 库，打开右边侧边栏About下面的 Realeases，下载最新的版本，本次下载为：hugo_extended_0.121.1_windows-amd64.zip 解压后，将其中的 hugo.exe 放到指定的安装目录，比如 D:\softwares\Hugo\bin，然后将该目录添加到系统环境变量（win+R → sysdm.cpl → 高级 → 环境变量 → 系统变量 Path）的 Path 下。 打开命令行，输入 hugo version，显示版本号即为安装成功 在几分钟内利用hugo快速发布自己的个人博客 快速开始 使用Git Bash依次输入以下命令，即可建立预览一个PaperMod主题的hugo网站：
hugo new site myblog cd myblog git init git submodule add --depth=1 https://github.com/adityatelange/hugo-PaperMod.git themes/PaperMod echo &amp;#34;theme = &amp;#39;PaperMod&amp;#39;&amp;#34; &amp;gt;&amp;gt; hugo.toml hugo server 通过终端中显示的 URL 查看您的站点。按此按钮Ctrl + C可停止 Hugo 的开发服务器。</description>
    </item>
    <item>
      <title>Unity PlayableDirector正播倒播处理</title>
      <link>https://0x4b404ec.github.io/posts/unityplayabledirector%E6%AD%A3%E6%92%AD%E5%80%92%E6%92%AD%E5%A4%84%E7%90%86/</link>
      <pubDate>Sun, 31 Dec 2023 19:57:41 +0800</pubDate>
      <guid>https://0x4b404ec.github.io/posts/unityplayabledirector%E6%AD%A3%E6%92%AD%E5%80%92%E6%92%AD%E5%A4%84%E7%90%86/</guid>
      <description>Unity PlayableDirector(Timeline) 正播倒播处理 项目要求控制Timeline的播放状态，官方给出的方案只有正播的处理，并没有倒播的接口。
而且网上搜索的一些方案都是使用协程，但是协程在处理中途暂停继续播放上比较难处理。
所以自己随便写了一个。处理上比较傻瓜。
下载DoTween插件 略&amp;hellip;
TimelineHelper.cs 主要是提供了两个静态接口，用来实现挂TimelineDirector组件
using UnityEngine; using UnityEngine.Playables; public static class PlayableExpansion { /// &amp;lt;summary&amp;gt; /// 为director添加自定义控制器 /// &amp;lt;/summary&amp;gt; /// &amp;lt;param name=&amp;#34;director&amp;#34;&amp;gt;&amp;lt;/param&amp;gt; /// &amp;lt;returns&amp;gt;&amp;lt;/returns&amp;gt; public static PlayableController AddPlayableController(this PlayableDirector director) { return director.gameObject.AddComponent&amp;lt;PlayableController&amp;gt;(); } /// &amp;lt;summary&amp;gt; /// 为obj添加自定义控制器 /// &amp;lt;/summary&amp;gt; /// &amp;lt;param name=&amp;#34;obj&amp;#34;&amp;gt;&amp;lt;/param&amp;gt; /// &amp;lt;returns&amp;gt;&amp;lt;/returns&amp;gt; public static PlayableController AddPlayableController(this GameObject obj) { return obj.AddComponent&amp;lt;PlayableController&amp;gt;(); } } TimelineDirector.cs Timeline的相关控制封装，没有用官方播放的API，只用到了PlayableDirector时间和采样(PlayableDirector.time和PlayableDirector.Evaluate())
using DG.Tweening; using Sirenix.OdinInspector; using System; using UnityEngine; using UnityEngine.</description>
    </item>
  </channel>
</rss>
